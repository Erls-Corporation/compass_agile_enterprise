ActsAsJavaValueObject
=====================

The acts_as_java_value_object provides a mechanism for converting an
ActiveRecord model into a corresponding java value object.

The ActsASJavaValueObject provides two methods: 

to_java -

converts the active record model to the named java value object based 
on the acts_as_java_value_object configuration

update_model_from_java_value_object -

 populates the active record model object
from the contents of the java value object based on the acts_as_java_value_object
configuration. NOTE- the update does not explicitly perform a save. The
responsibility of performing a save is left to the developer.

Configuration
=============

:java_model
-----------

Declares the java class that will act as the value object. This object is
 created when to_java is called on the active record model

:attribute_name
---------------

 Defines an association-child relationship. This value is ignored for root
 value objects

:map_attribute_to_java_method
-----------------------------

 Overrides the default java mutator naming convention for a given attribute
 with the method named

:map_method
-----------

 Map the active record model method specified to a given java value object
 (currently not implemented)

:exclude_attributes
-------------------

 contains a list of attributes that will not participate in the value object
 field attribute population


:include
--------

 Declares a child object relationship with this parent object. This option
 is recursive allowing child objects to contain child objects


Example
=======

  acts_as_java_value_object :java_model=>"com.tnsolutionsinc.compass.erp.models.TimesharePtsOwnership",
    :map_attribute_to_java_method=>{"key"=>"setId"},
    :map_method_to_java_method=>[{:method=>"inv_item",:java_method=>"setInvItem",:java_model=>"com.tnsolutionsinc.compass.erp.models.AccommodationInvItem"},
    {:method=>"resort",:java_method=>"setResort",:java_model=>"com.tnsolutionsinc.compass.erp.models.Resort"},
    {:method=>"unit_type",:java_method=>"setUnitType",:java_model=>"com.tnsolutionsinc.compass.erp.models.AccommodationUnitType"}
  ],
    :include=>[
    {
      :attribute_name=>"agreement",
      :exclude_attribute=>["product_id"],
      :java_model=>"com.tnsolutionsinc.compass.erp.models.Agreement",
      :include=>[
        {
          :attribute_name=>"agreement_type",
          :java_model=>"com.tnsolutionsinc.compass.erp.models.AgreementType",
        }
      ]
    },
    {
      :attribute_name=>"accomodation_inv_item",
      :java_method=>"setAccommodationInvItem",
      :map_attribute_to_java_method=>{"deliquency_flag"=>"setDelinquencyFlag"},
      :java_model=>"com.tnsolutionsinc.compass.erp.models.AccommodationInvItem",
      :include=>[
        {
          :attribute_name=>"resort",
          :java_model=>"com.tnsolutionsinc.compass.erp.models.Resort",
        },
        {
          :attribute_name=>"accomodation_unit",
          :java_method=>"setAccommodationUnit",
          :java_model=>"com.tnsolutionsinc.compass.erp.models.AccommodationUnit",
          :include=>[
            {
              :attribute_name=>"accomodation_unit_type",
              :java_method=>"setAccommodationUnitType",
              :java_model=>"com.tnsolutionsinc.compass.erp.models.AccommodationUnitType",
        }
      ]
        }

      ]
    }
  ]


Theory of Operation
===================

the acts_as_java_value_object performs two main tasks: creating a java value
object from an active record and updating an existing active record model from
a populated java value object. The supplied configuration file explicitly
defines which parts of a java value object will be populated when creating the
java value object and which parts of an active record model will be updated 
when updating from a java value object.

Both operations perform their tasks in two steps.

to_java
-------

First the active record models attributes are collected (excluding any
explicitly declared exclusions). This list is iterated over and each attribute
is mapped to a corresponding value object mutator name. The default mutator name
is expected to be the attribute name converted from snake_case to CamelCase
prefixed with 'set' to conform to the java mutator standard naming convention.
A provision is made to allow the configuration to override this naming
convention on a per-attribute basis.

The second step inspects the active record configuration for this model. If it
contains the :include option then the list of :include(s) are iterated over
creating any subordinate child objects and assigning them to the parent java
value object.

update_model_from_java_value_object
-----------------------------------

First the active record models attributes are collected (excluding any
explicitly declared exclusions). This list is iterated over and each attribute
java value is retrieved from the supplied java value object. This method uses
the same mechanism as the to_java method to obtains the accessors. However
instead of prefixing the attribute with 'set', 'get' is substituted. If the
method name is explictly declared the accessor is redefined as a set. NOTE: all
accessor/mutator names on the java object MUST conform to the standard java
naming convention of 'set','get' prefixes.


The second step inspects the active record configuration for this model. If it
contains the :include option then the list of :include(s) are iterated over.
Each subordinate object's corresponding java value object is then used to
populate the subordinate active record child objects.

Notes
=====

:method is not currently implemented

Copyright (c) 2010 [TrueNorth Solutions], released under the MIT license
